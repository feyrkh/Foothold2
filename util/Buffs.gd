extends Object

# buff dictionary structure:
const BUFF_TIMER = 0 # how many seconds left on the buff; if null, buff lasts until removed
const BUFF_MULTIPLY = 1 # basic buff multiplier to whatever stats it increases; if null, 1.0
const BUFF_ADD = 2 # basic buff addition to whatever stats it increases; if null, 0
const BUFF_STATS = 3 # dict of stats this buff should affect, with the value as a float % multiplier to the BUFF_MULTIPLY and BUFF_ADD values; if null, affects all stats queried at 100%
const BUFF_ADD_CALLBACKS = 4 # autogenerated on buff creation, 
const BUFF_MULTIPLY_CALLBACKS = 4 # autogenerated on buff creation, 
const BUFF_ID = 5

const MEDITATE = 0
const REST = 1

const BUFF_NAMES = [
	'meditate',
	'rest',
]

const BUFF_DESCRIPTIONS = [
	'Quiet contemplation. Restores focus.',
	'Quiet recuperation. Restores health.',
]

static func get_buff_name(buff_id:int)->String:
	return BUFF_NAMES[buff_id]

static func get_buff_short_desc(buff_id:int)->String:
	return BUFF_DESCRIPTIONS[buff_id]

static func get_buff_long_desc(buff_dict:Dictionary):
	var result = get_buff_short_desc(buff_dict[BUFF_ID])
	return result

static func build_buff(owner:GameItem, buff_id:int, affected_stats:Dictionary, buff_time=null):
	var result = {BUFF_ID: buff_id, BUFF_STATS: affected_stats}
	if buff_time != null:
		result[BUFF_TIMER] = buff_time
	if affected_stats != null:
		var add_callbacks = {}
		var multiply_callbacks = {}
		for stat in affected_stats:
			var callback_name = 'buff_%s_add_%s' % [get_buff_name(buff_id), stat]
			if owner.has_method(callback_name):
				add_callbacks[stat] = callback_name
			callback_name = 'buff_%s_multiply_%s' % [get_buff_name(buff_id), stat]
			if owner.has_method(callback_name):
				multiply_callbacks[stat] = callback_name
		
			
